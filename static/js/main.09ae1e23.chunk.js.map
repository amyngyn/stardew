{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["ALL_PROBABILITIES","StardewCalculator","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","crops","level","fertilizer","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","defineProperty","target","name","value","preventDefault","n","k","coeff","x","p","concat","pGold","binomial","Math","pow","toFixed","react_default","a","createElement","onSubmit","type","onChange","react_katex","math","formatLaTeXEquation","calculateProbability","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.09ae1e23.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport 'katex/dist/katex.min.css';\nimport { InlineMath } from 'react-katex';\n\nconst NONE_PROBABILITIES = [\n  0.01,\n  0.03,\n  0.05,\n  0.07,\n  0.09,\n  0.11,\n  0.13,\n  0.15,\n  0.17,\n  0.19,\n  0.21,\n  0.23,\n  0.25,\n  0.27,\n];\n\nconst BASIC_PROBABILITIES = [\n  0.04,\n  0.08,\n  0.12,\n  0.15,\n  0.19,\n  0.23,\n  0.26,\n  0.30,\n  0.34,\n  0.37,\n  0.41,\n  0.45,\n  0.48,\n  0.52,\n];\n\nconst QUALITY_PROBABILITIES = [\n  0.08,\n  0.13,\n  0.18,\n  0.24,\n  0.29,\n  0.34,\n  0.40,\n  0.45,\n  0.50,\n  0.56,\n  0.61,\n  0.66,\n  0.72,\n  0.77,\n];\n\nconst ALL_PROBABILITIES = [\n  NONE_PROBABILITIES,\n  BASIC_PROBABILITIES,\n  QUALITY_PROBABILITIES,\n];\n\nclass StardewCalculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      crops: 10,\n      level: 1,\n      fertilizer: 1,\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({[event.target.name]: event.target.value});\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n  }\n\n  binomial(n, k) {\n    // source: https://www.w3resource.com/javascript-exercises/javascript-math-exercise-20.php\n    var coeff = 1;\n    for (var x = n-k+1; x <= n; x++) coeff *= x;\n    for (x = 1; x <= k; x++) coeff /= x;\n    return coeff;\n  }\n\n  formatLaTeXEquation() {\n    let n = this.state.crops;\n    let p = ALL_PROBABILITIES[this.state.fertilizer][this.state.level];\n    return `\\\\sum_{x=5}^{${n}} \\\\binom{${n}}{x} ${p}^x * \\\\left(1 - ${p}\\\\right)^{\\\\left(${n} - x\\\\right)}`\n  }\n\n  calculateProbability() {\n    // Equation: sum (p^x * ((1-p)^(n-x)) * (n choose x)), x=5 to n\n    // source: me, I'm great: https://amy.dev/?page_id=318\n    let n = this.state.crops;\n    let p = ALL_PROBABILITIES[this.state.fertilizer][this.state.level];\n\n    let pGold = 0;\n    for (let x = 5; x <= n; x++) {\n      let nChooseX = this.binomial(n, x);\n      let pGoldX = Math.pow(p, x);\n      let pNotGoldX = Math.pow(1 - p, n - x);\n\n      pGold += nChooseX * pGoldX * pNotGoldX;\n    }\n    return (pGold * 100).toFixed(1);\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>How likely is it that you'll grow at least five golden crops?</h1>\n        <form onSubmit={this.handleSubmit}>\n          <label>\n            How many crops did you plant?\n            <br />\n            <input type=\"text\" name=\"crops\" value={this.state.crops} onChange={this.handleChange} />\n          </label>\n          <br /><br />\n          <label>\n            What's your farming level?\n            <br />\n            <input type=\"text\" name=\"level\" value={this.state.level} onChange={this.handleChange} />\n\t  </label>\n          <br /><br />\n          <label>\n            What fertilizer did you use?\n            <br />\n            <select name=\"fertilizer\" value={this.state.fertilizer} onChange={this.handleChange}>\n              <option value=\"0\">None</option>\n              <option value=\"1\">Basic</option>\n              <option value=\"2\">Quality</option>\n            </select>\n\t  </label>\n        </form>\n        <br /><br />\n\n        <InlineMath math={`${this.formatLaTeXEquation()} = ${this.calculateProbability()}\\\\%`} />\n      </div>\n    );\n  }\n}\n\nexport default StardewCalculator;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}